import { z } from 'zod';

export const error = z.object({ status: z.number(), message: z.string() });
export const searchResult = z.object({
  tracks: z.object({
    href: z.string(),
    items: z.array(
      z.object({
        album: z.object({
          album_type: z.string(),
          artists: z.array(
            z.object({
              external_urls: z.object({ spotify: z.string() }),
              href: z.string(),
              id: z.string(),
              name: z.string(),
              type: z.string(),
              uri: z.string(),
            }),
          ),
          available_markets: z.array(z.string()),
          external_urls: z.object({ spotify: z.string() }),
          href: z.string(),
          id: z.string(),
          images: z.array(z.object({ height: z.number(), url: z.string(), width: z.number() })),
          name: z.string(),
          release_date: z.string(),
          release_date_precision: z.string(),
          total_tracks: z.number(),
          type: z.string(),
          uri: z.string(),
        }),
        artists: z.array(
          z.object({
            external_urls: z.object({ spotify: z.string() }),
            href: z.string(),
            id: z.string(),
            name: z.string(),
            type: z.string(),
            uri: z.string(),
          }),
        ),
        available_markets: z.array(z.string()),
        disc_number: z.number(),
        duration_ms: z.number(),
        explicit: z.boolean(),
        external_ids: z.object({ isrc: z.string() }),
        external_urls: z.object({ spotify: z.string() }),
        href: z.string(),
        id: z.string(),
        is_local: z.boolean(),
        name: z.string(),
        popularity: z.number(),
        preview_url: z.string(),
        track_number: z.number(),
        type: z.string(),
        uri: z.string(),
      }),
    ),
    limit: z.number(),
    next: z.string(),
    offset: z.number(),
    previous: z.null(),
    total: z.number(),
  }),
});

export const track = z.object({
  album: z.object({
    album_type: z.string(),
    total_tracks: z.number(),
    available_markets: z.array(z.string()),
    external_urls: z.object({ spotify: z.string() }),
    href: z.string(),
    id: z.string(),
    images: z.array(z.object({ url: z.string(), height: z.number(), width: z.number() })),
    name: z.string(),
    release_date: z.string(),
    release_date_precision: z.string(),
    restrictions: z.object({ reason: z.string() }),
    type: z.string(),
    uri: z.string(),
    artists: z.array(
      z.object({
        external_urls: z.object({ spotify: z.string() }),
        href: z.string(),
        id: z.string(),
        name: z.string(),
        type: z.string(),
        uri: z.string(),
      }),
    ),
  }),
  artists: z.array(
    z.object({
      external_urls: z.object({ spotify: z.string() }),
      followers: z.object({ href: z.string(), total: z.number() }),
      genres: z.array(z.string()),
      href: z.string(),
      id: z.string(),
      images: z.array(z.object({ url: z.string(), height: z.number(), width: z.number() })),
      name: z.string(),
      popularity: z.number(),
      type: z.string(),
      uri: z.string(),
    }),
  ),
  available_markets: z.array(z.string()),
  disc_number: z.number(),
  duration_ms: z.number(),
  explicit: z.boolean(),
  external_ids: z.object({
    isrc: z.string(),
    ean: z.string(),
    upc: z.string(),
  }),
  external_urls: z.object({ spotify: z.string() }),
  href: z.string(),
  id: z.string(),
  is_playable: z.boolean(),
  linked_from: z.object({}),
  restrictions: z.object({ reason: z.string() }),
  name: z.string(),
  popularity: z.number(),
  preview_url: z.string(),
  track_number: z.number(),
  type: z.string(),
  uri: z.string(),
  is_local: z.boolean(),
});
